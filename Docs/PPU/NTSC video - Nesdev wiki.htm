<!DOCTYPE html>
<!-- saved from url=(0045)http://wiki.nesdev.com/w/index.php/NTSC_video -->
<html lang="en" dir="ltr" class="client-js"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>NTSC video - Nesdev wiki</title>
<meta charset="UTF-8">
<meta name="generator" content="MediaWiki 1.18.0">
<link rel="shortcut icon" href="http://wiki.nesdev.com/favicon.ico">
<link rel="search" type="application/opensearchdescription+xml" href="http://wiki.nesdev.com/w/opensearch_desc.php" title="Nesdev wiki (en)">
<link rel="EditURI" type="application/rsd+xml" href="http://wiki.nesdev.com/w/api.php?action=rsd">
<link rel="alternate" type="application/atom+xml" title="Nesdev wiki Atom feed" href="http://wiki.nesdev.com/w/index.php?title=Special:RecentChanges&feed=atom">
<link rel="stylesheet" href="http://wiki.nesdev.com/w/load.php?debug=false&lang=en&modules=mediawiki.legacy.commonPrint%2Cshared%7Cskins.monobook&only=styles&skin=monobook&*">
<!--[if lt IE 5.5000]><link rel="stylesheet" href="/w/skins/monobook/IE50Fixes.css?303" media="screen" /><![endif]-->
<!--[if IE 5.5000]><link rel="stylesheet" href="/w/skins/monobook/IE55Fixes.css?303" media="screen" /><![endif]-->
<!--[if IE 6]><link rel="stylesheet" href="/w/skins/monobook/IE60Fixes.css?303" media="screen" /><![endif]-->
<!--[if IE 7]><link rel="stylesheet" href="/w/skins/monobook/IE70Fixes.css?303" media="screen" /><![endif]--><style type="text/css" media="all">.mw-collapsible-toggle{float:right} li .mw-collapsible-toggle{float:none} .mw-collapsible-toggle-li{list-style:none}

/* cache key: ndwiki-mw1_:resourceloader:filter:minify-css:4:4250852ed2349a0d4d0fc6509a3e7d4c */
</style><style type="text/css" media="all">.js-messagebox{margin:1em 5%;padding:0.5em 2.5%;border:1px solid #ccc;background-color:#fcfcfc;font-size:0.8em}.js-messagebox .js-messagebox-group{margin:1px;padding:0.5em 2.5%;border-bottom:1px solid #ddd}.js-messagebox .js-messagebox-group:last-child{border-bottom:thin none transparent}

/* cache key: ndwiki-mw1_:resourceloader:filter:minify-css:4:8b08bdc91c52a9ffba396dccfb5b473c */
</style><meta name="ResourceLoaderDynamicStyles" content="">
<link rel="stylesheet" href="http://wiki.nesdev.com/w/load.php?debug=false&lang=en&modules=site&only=styles&skin=monobook&*">
<style>a:lang(ar),a:lang(ckb),a:lang(fa),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}a.new,#quickbar a.new{color:#ba0000}

/* cache key: ndwiki-mw1_:resourceloader:filter:minify-css:4:c88e2bcd56513749bec09a7e29cb3ffa */
</style>
<script src="./NTSC video - Nesdev wiki_files/cb=gapi.loaded_0" async=""></script><script type="text/javascript" async="" src="./NTSC video - Nesdev wiki_files/plusone.js" gapi_processed="true"></script><script src="./NTSC video - Nesdev wiki_files/load.php"></script><script src="./NTSC video - Nesdev wiki_files/load(1).php"></script>
<script>if(window.mw){
	mw.config.set({"wgCanonicalNamespace": "", "wgCanonicalSpecialPageName": false, "wgNamespaceNumber": 0, "wgPageName": "NTSC_video", "wgTitle": "NTSC video", "wgCurRevisionId": 2904, "wgArticleId": 58, "wgIsArticle": true, "wgAction": "view", "wgUserName": null, "wgUserGroups": ["*"], "wgCategories": [], "wgBreakFrames": false, "wgRestrictionEdit": [], "wgRestrictionMove": []});
}
</script><script>if(window.mw){
	mw.loader.load(["mediawiki.page.startup"]);
}
</script><script type="text/javascript" src="./NTSC video - Nesdev wiki_files/load(2).php"></script>
</head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-NTSC_video action-view skin-monobook">
<div id="globalWrapper">
<div id="column-content"><div id="content"><div id="mw-js-message" class="js-messagebox" style="display: none; "></div>
	<a id="top"></a>
	
	<h1 id="firstHeading" class="firstHeading">NTSC video</h1>
	<div id="bodyContent">
		<div id="siteSub">From Nesdev wiki</div>
		<div id="contentSub"></div>
		<div id="jump-to-nav">Jump to: <a href="http://wiki.nesdev.com/w/index.php/NTSC_video#column-one">navigation</a>, <a href="http://wiki.nesdev.com/w/index.php/NTSC_video#searchInput">search</a></div>
		<!-- start content -->
<div lang="en" dir="ltr" class="mw-content-ltr"><p><i>Note: This data is preliminary and still being reviewed.</i>
</p>
<table id="toc" class="toc"><tbody><tr><td><div id="toctitle"><h2>Contents</h2><span class="toctoggle">&nbsp;[<a href="http://wiki.nesdev.com/w/index.php/NTSC_video#" class="internal" id="togglelink">hide</a>]&nbsp;</span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="http://wiki.nesdev.com/w/index.php/NTSC_video#Basics"><span class="tocnumber">1</span> <span class="toctext">Basics</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="http://wiki.nesdev.com/w/index.php/NTSC_video#Scanline_Timing"><span class="tocnumber">2</span> <span class="toctext">Scanline Timing</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="http://wiki.nesdev.com/w/index.php/NTSC_video#Brightness_Levels"><span class="tocnumber">3</span> <span class="toctext">Brightness Levels</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="http://wiki.nesdev.com/w/index.php/NTSC_video#Color_Phases"><span class="tocnumber">4</span> <span class="toctext">Color Phases</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="http://wiki.nesdev.com/w/index.php/NTSC_video#Color_Tint_Bits"><span class="tocnumber">5</span> <span class="toctext">Color Tint Bits</span></a></li>
<li class="toclevel-1 tocsection-6"><a href="http://wiki.nesdev.com/w/index.php/NTSC_video#Example_Waveform"><span class="tocnumber">6</span> <span class="toctext">Example Waveform</span></a></li>
<li class="toclevel-1 tocsection-7"><a href="http://wiki.nesdev.com/w/index.php/NTSC_video#Emulating_in_C.2B.2B_code"><span class="tocnumber">7</span> <span class="toctext">Emulating in C++ code</span></a></li>
<li class="toclevel-1 tocsection-8"><a href="http://wiki.nesdev.com/w/index.php/NTSC_video#Interactive_Demo"><span class="tocnumber">8</span> <span class="toctext">Interactive Demo</span></a></li>
</ul>
</td></tr></tbody></table>
<h2> <span class="mw-headline" id="Basics">Basics</span></h2>
<p>Master clock is 21.47727273 MHz. Each PPU pixel lasts four clocks. $xy refers to a palette color in the range $00 to $3F.
</p>
<h2> <span class="mw-headline" id="Scanline_Timing">Scanline Timing</span></h2>
<p>Values in PPU pixels (341 total per scanline).
</p>
<table border="1">
<tbody><tr>
<td> sync </td>
<td> 25
</td></tr>
<tr>
<td> black </td>
<td> 4
</td></tr>
<tr>
<td> colorburst </td>
<td> 15
</td></tr>
<tr>
<td> black </td>
<td> 5
</td></tr>
<tr>
<td> pulse </td>
<td> 1
</td></tr>
<tr>
<td> left border (background color) </td>
<td> 15
</td></tr>
<tr>
<td> active </td>
<td> 256
</td></tr>
<tr>
<td> right border (background color) </td>
<td> 11
</td></tr>
<tr>
<td> black </td>
<td> 9
</td></tr></tbody></table>
<h2> <span class="mw-headline" id="Brightness_Levels">Brightness Levels</span></h2>
<p>Voltage levels used by the PPU are as follows - absolute, relative to synch, and normalized between black level and white:
</p>
<table border="1">
<tbody><tr>
<td> Type </td>
<td> Absolute </td>
<td> Relative </td>
<td> Normalized
</td></tr>
<tr>
<td> Synch </td>
<td> 0.781 </td>
<td> 0.000 </td>
<td> -0.359
</td></tr>
<tr>
<td> Colorburst L </td>
<td> 1.000 </td>
<td> 0.218 </td>
<td> -0.208
</td></tr>
<tr>
<td> Colorburst H </td>
<td> 1.712 </td>
<td> 0.931 </td>
<td> 0.286
</td></tr>
<tr>
<td colspan="4">
</td></tr>
<tr>
<td>Color 0D </td>
<td> 1.131 </td>
<td> 0.350 </td>
<td> -0.117
</td></tr>
<tr>
<td>Color 1D (black) </td>
<td> 1.300 </td>
<td> 0.518 </td>
<td> 0.000
</td></tr>
<tr>
<td>Color 2D </td>
<td> 1.743 </td>
<td> 0.962 </td>
<td> 0.308
</td></tr>
<tr>
<td>Color 3D </td>
<td> 2.331 </td>
<td> 1.550 </td>
<td> 0.715
</td></tr>
<tr>
<td>Color 00 </td>
<td> 1.875 </td>
<td> 1.090 </td>
<td> 0.397
</td></tr>
<tr>
<td>Color 10 </td>
<td> 2.287 </td>
<td> 1.500 </td>
<td> 0.681
</td></tr>
<tr>
<td>Color 20 </td>
<td> 2.743 </td>
<td> 1.960 </td>
<td> 1.000
</td></tr>
<tr>
<td>Color 30 </td>
<td> 2.743 </td>
<td> 1.960 </td>
<td> 1.000
</td></tr></tbody></table>
<p>$xE/$xF output the same voltage as $1D. $x1-$xC output a square wave alternating between levels for $xD and $x0. Colors $20 and $30 are exactly the same.
</p>
<h2> <span class="mw-headline" id="Color_Phases">Color Phases</span></h2>
<pre>111111------
22222------2
3333------33
444------444
55------5555
6------66666
------777777
-----888888-
----999999--
---AAAAAA---
--BBBBBB----
-CCCCCC-----
</pre>
<p>The color generator is clocked by the rising <i>and</i> falling edges of the ~21.48 MHz clock, resulting in an effective ~42.95 MHz clock rate. There are 12 color square waves, spaced at regular phases. Each runs at the ~3.58 MHz colorburst rate. Color $xY uses the wave shown in row Y from the table. Color burst uses color phase 8 (with voltages listed above).
</p>
<h2> <span class="mw-headline" id="Color_Tint_Bits">Color Tint Bits</span></h2>
<p>There are three color modulation channels controlled by the top three bits of $2001. Each channel uses one of the color square waves (see above diagram) and enables attenuation of the video signal when the color square wave is high. A single attenuator is shared by all channels.
</p>
<table class="tabular">
<tbody><tr>
<th> $2001 </th>
<th> Active phase </th>
<th> Complement
</th></tr>
<tr>
<td> Bit 7 </td>
<td> Color 8 </td>
<td> Color 2 (blue)
</td></tr>
<tr>
<td> Bit 6 </td>
<td> Color 4 </td>
<td> Color A (green)
</td></tr>
<tr>
<td> Bit 5 </td>
<td> Color C </td>
<td> Color 6 (red)
</td></tr></tbody></table>
<p>When signal attenuation is enabled by one or more of the channels and the current pixel is a color other than $xE/$xF (black), the signal is attenuated as follows (calculations given for both relative and absolute values as shown in the voltage table above):
</p><p><tt>relative = relative * 0.746</tt>
</p><p><tt>normalized = normalized * 0.746 - 0.0912</tt>
</p><p>For example, when $2001 bit 6 is true, the attenuator will be active during the phases of color 4.
This means the attenuator is not active during its complement (color A), and the screen appears to have a tint of color A, which is green.
</p>
<h2> <span class="mw-headline" id="Example_Waveform">Example Waveform</span></h2>
<p>This waveform steps through various grays and then stops on a color.
</p>
<pre> 1.0               +--+
 0.9               |  |
 0.8               |  |
 0.7            +--+  | +-+ +-+
 0.6            |     | | | | |
 0.5            |     | | | | |
 0.4         +--+     | | | | |
 0.3      +--+        | | | | |
 0.2      |           | | | | |
 0.1      |           | | | | |
 0.0 . +--+ . . . . . +-+ +-+ + . .
-0.1 --+
     0D 0F 2D 00 10 30   11
</pre>
<p>The PPU's shortcut method of NTSC modulation often produces artifacts in which vertical lines appear slightly ragged, as the chroma spills over into luma.
</p>
<div class="thumb tright"><div class="thumbinner" style="width:258px;"><a href="http://wiki.nesdev.com/w/index.php/File:NTSC_video_ragged_box.png" class="image"><img alt="" src="./NTSC video - Nesdev wiki_files/NTSC_video_ragged_box.png" width="256" height="160" class="thumbimage"></a>  <div class="thumbcaption">Generation and demodulation of a red corner</div></div></div>
<p><br clear="all">
</p><p><br>
</p>
<h2> <span class="mw-headline" id="Emulating_in_C.2B.2B_code">Emulating in C++ code</span></h2>
<p>Calculating the momentary NTSC signal level can be done as follows in C++:
</p>
<pre>    // Voltage levels, relative to synch voltage
    static const float black=.518f, white=1.962f, attenuation=.746f,
        levels[8] = {.350f, .518f, .962f,1.550f,  // Signal low
                    1.094f,1.506f,1.962f,1.962f}; // Signal high

    // Input variables:
    int pixel; // Pixel color (9-bit) given as input. Bitmask format: "eeellcccc".
    int phase; // Signal phase (0..11). It is a variable that increases by 8 each pixel.

    // Decode the NES color.
    int color = (pixel &amp; 0x0F);    // 0..15 "cccc"
    int level = (pixel &gt;&gt; 4) &amp; 3;  // 0..3  "ll"
    int emphasis = (pixel &gt;&gt; 6);   // 0..7  "eee"
    if(color &gt; 13) { level = 1;  } // For colors 14..15, level 1 is forced.

    // The square wave for this color alternates between these two voltages:
    float low  = levels[0 + level];
    float high = levels[4 + level];
    if(color == 0) { low = high; } // For color 0, only high level is emitted
    if(color &gt; 12) { high = low; } // For colors 13..15, only low level is emitted

    // Generate the square wave
    auto InColorPhase = [=](int color) { return (color + phase) % 12 &lt; 6; }; // Inline function
    float signal = InColorPhase(color) ? high : low;

    // When de-emphasis bits are set, some parts of the signal are attenuated:
    if( ((emphasis &amp; 1) &amp;&amp; InColorPhase(0))
    ||  ((emphasis &amp; 2) &amp;&amp; InColorPhase(4))
    ||  ((emphasis &amp; 4) &amp;&amp; InColorPhase(8)) ) signal = signal * attenuation;
</pre>
<p>The process of generating NTSC signal for a single pixel can be simulated with the following C++ code:
</p>
<pre>    int phase = PPU_cycle_counter * 8;
    for(int p=0; p&lt;8; ++p) // Each pixel produces distinct 8 samples of NTSC signal.
    {
        float signal = ...; // Calculated as above
        // Optionally apply some lowpass-filtering to the signal here.
        // Optionally normalize the signal to 0..1 range: signal = (signal-black) / (white-black);
        save_signal_level(signal); // Send the signal to the decoder (which produces visual).
        phase = phase + 1;
    }

</pre>
<p>It is important to note that while the NES only generates eight (8) samples of NTSC signal per pixel, the wavelength for chroma is 12 samples long. This means that the colors of adjacent pixels get mandatorily mixed up to some degree. For the same reason, narrow black&amp;white details can be interpreted as colors.
</p><p>Because the scanline length is uneven (341*8 is not an even multiple of 12), the color mixing shifts a little each scanline. This appears visually as a sawtooth effect at the edges of colors at high resolution. The sawtooth cycles every 3 scanlines.
</p><p>Because also the frame length is uneven (neither 262*341*8 nor (262*341-1)*8 is an even multiple of 12), the color mixing also changes a little every frame. When rendering is normally enabled, the screen is alternatingly 89342 and 89341 cycles long. The combination of these (89342+89341)*8 <i>is</i> an even multiple of 12, which means that the artifact pattern cycles every 2 frames. The pattern of cycling can be changed by disabling rendering during the end of the pre-render scanline; it forces the screen length to 89342 cycles, even if would be 89341 otherwise.
</p><p>The process of decoding NTSC signal (convert it into RGB) is subject to a lot of study, and there are many patents and different techniques for it. A simple method suitable for emulation is covered below. It is not accurate, because in reality the chroma is blurred much more than is done here (the region of signal sampled for I and Q is wider than 12 samples), and the filter used here is a simple box FIR filter rather than an IIR filter, but it already produces a quite authentic looking picture. In addition, the border region (total of 26 pixels of background color around the 256-pixel scanline) is not sampled.
</p>
<pre>    float signal_levels[256*8] = {...}; // Eight signal levels for each pixel, normalized to 0..1 range. Calculated as above.
    unsigned Width; // Input: Screen width. Can be not only 256, but anything up to 2048.
    float phase;    // Input: This should the value that was PPU_cycle_counter * 8 + 3.9
                    // at the BEGINNING of this scanline. It should be modulo 12.
                    // It can additionally include a floating-point hue offset.
    for(unsigned x = 0; x &lt; Width; ++x)
    {
        // Determine the region of scanline signal to sample. Take 12 samples.
        int center = x * (256*8) / Width + 0;
        int begin = center - 6; if(begin &lt; 0)     begin = 0;
        int end   = center + 6; if(end   &gt; 256*8) end   = 256*8;
        float y = 0.f, i = 0.f, q = 0.f; // Calculate the color in YIQ.
        for(int p = begin; p &lt; end; ++p) // Collect and accumulate samples
        {
            float level = signal_levels[p] / 12.f;
            y  =  y + level;
            i  =  i + level * cos( M_PI * (phase+p) / 6 );
            q  =  q + level * sin( M_PI * (phase+p) / 6 );
        }
        render_pixel(y,i,q); // Send the YIQ color for rendering.
    }
</pre>
<p>The NTSC decoder here produces pixels in YIQ color space.
</p><p>If you want more saturated colors, just multiply <code>i</code> and <code>q</code> with a factor of your choosing, such as 1.7. If you want brighter colors, just multiply <code>y</code>, <code>i</code> and <code>q</code> with a factor of your choosing, such as 1.1. If you want to adjust the hue, just add or subtract a value from/to <code>phase</code>. If you want to see so called chroma dots, change the begin and end in such manner that you collect a number of samples that is not divisible with 12. If you want to blur the video horizontally, change the begin and end in such manner that the samples are collected from a wider region.
</p><p>The YIQ colors can be converted into sRGB colors with the following formula, using the FCC-sanctioned YIQ-to-RGB conversion matrix. This produces a value that can be saved to e.g. framebuffer:
</p>
<pre>    float gamma = 2.0f; // Assumed display gamma
    auto gammafix = [=](float f) { return f &lt;= 0.f ? 0.f : pow(f, 2.2f / gamma); };
    auto clamp    = [](int v) { return v&gt;255 ? 255 : v; };
    unsigned rgb =
        0x10000*clamp(255.95 * gammafix(y +  0.946882f*i +  0.623557f*q))
      + 0x00100*clamp(255.95 * gammafix(y + -0.274788f*i + -0.635691f*q))
      + 0x00001*clamp(255.95 * gammafix(y + -1.108545f*i +  1.709007f*q));
</pre>
<p>The two images below illustrate the NTSC artifacts.
In the left side image, 12 samples of NTSC signal were generated for each NES pixel,
and each display pixel was separately rendered by decoding that 12-sample signal.
In the right side image, 8 samples of NTSC signal were generated for each NES pixel,
and each display pixel was rendered by decoding 12 samples of NTSC signal from the
corresponding location within the scanline.<br clear="all">
</p>
<table cellspacing="0" cellpadding="0">
<tbody><tr><td colspan="2"><div class="thumb tleft"><div class="thumbinner" style="width:586px;"><a href="http://wiki.nesdev.com/w/index.php/File:Nes_ntsc_perpixel.png" class="image"><img alt="" src="./NTSC video - Nesdev wiki_files/Nes_ntsc_perpixel.png" width="584" height="480" class="thumbimage"></a>  <div class="thumbcaption">Per-pixel rendering: 12 samples of NTSC signal per input pixel; the same 12 samples are decoded for each output pixel</div></div></div></td>
<td colspan="2"><div class="thumb tleft"><div class="thumbinner" style="width:586px;"><a href="http://wiki.nesdev.com/w/index.php/File:Nes_ntsc_perscanline.gif" class="image"><img alt="" src="./NTSC video - Nesdev wiki_files/Nes_ntsc_perscanline.gif" width="584" height="480" class="thumbimage"></a>  <div class="thumbcaption">Per-scanline rendering: 8 samples of NTSC signal per input pixel; 12 samples are decoded for each output pixel</div></div></div></td></tr>
<tr><td><div class="thumb tleft"><div class="thumbinner" style="width:258px;"><a href="http://wiki.nesdev.com/w/index.php/File:Nes_ntsc_perpixel_small.png" class="image"><img alt="" src="./NTSC video - Nesdev wiki_files/Nes_ntsc_perpixel_small.png" width="256" height="240" class="thumbimage"></a>  <div class="thumbcaption">Same as above, but rendered at 256x240 without upscaling</div></div></div></td>
<td><div class="thumb tleft"><div class="thumbinner" style="width:258px;"><a href="http://wiki.nesdev.com/w/index.php/File:Nes_ntsc_perpixel_small_bw.png" class="image"><img alt="" src="./NTSC video - Nesdev wiki_files/Nes_ntsc_perpixel_small_bw.png" width="256" height="240" class="thumbimage"></a>  <div class="thumbcaption">Same in grayscale (zero saturation). This illustrates well how the different color values have exactly the same luminosity; only the chroma phase differs.</div></div></div></td>
<td><div class="thumb tleft"><div class="thumbinner" style="width:258px;"><a href="http://wiki.nesdev.com/w/index.php/File:Nes_ntsc_perscanline_small.gif" class="image"><img alt="" src="./NTSC video - Nesdev wiki_files/Nes_ntsc_perscanline_small.gif" width="256" height="240" class="thumbimage"></a>  <div class="thumbcaption">Same as above, but rendered at 256x240 rather than at 2048x240 and then downscaled</div></div></div></td>
<td><div class="thumb tleft"><div class="thumbinner" style="width:258px;"><a href="http://wiki.nesdev.com/w/index.php/File:Nes_ntsc_perscanline_small_bw.gif" class="image"><img alt="" src="./NTSC video - Nesdev wiki_files/Nes_ntsc_perscanline_small_bw.gif" width="256" height="240" class="thumbimage"></a>  <div class="thumbcaption">Same in grayscale</div></div></div></td></tr></tbody></table>
<p>The source code of the program that generated both images can be read at <a rel="nofollow" class="external autonumber" href="http://bisqwit.iki.fi/jutut/kuvat/programming_examples/nesemu1/ntsc_test.phps">[1]</a>. Note that even though the image resembles the well-known Philips PM5544 test card, it is not the same; the exact same
colors could not be reproduced with NES colors. In addition, some parts were changed to better test NES features. For example, the backgrounds for the "station ID" regions (the black rectangles at the top and at the bottom inside the circle) are generated using the various blacks within the NES palette.
</p>
<h2> <span class="mw-headline" id="Interactive_Demo">Interactive Demo</span></h2>
<p>The following C source code implements the above described algorithm and displays it on screen with interactive mouse control of phase using <a rel="nofollow" class="external text" href="http://www.libsdl.org/index.php">SDL</a>.
</p>
<ul><li> <a rel="nofollow" class="external text" href="http://www.io.com/~greens/temp/nes_ntsc_waveform.c">nes_ntsc_waveform.c</a>
</li><li> <a rel="nofollow" class="external text" href="http://www.baisoku.org/nes_ntsc_waveform.zip">Windows executable (requires SDL.dll)</a>
</li><li> <a href="http://wiki.nesdev.com/w/index.php?title=Special:Upload&wpDestFile=Nes_ntsc_palette.c" class="new" title="Nes ntsc palette.c">nes_ntsc_palette.c</a> - a sample NTSC palette generator program
</li></ul>

<!-- 
NewPP limit report
Preprocessor node count: 104/1000000
Post-expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key ndwiki-mw1_:pcache:idhash:58-0!*!*!!en!2!* and timestamp 20120731162456 -->
</div><div class="printfooter">
Retrieved from "<a href="http://wiki.nesdev.com/w/index.php?title=NTSC_video&oldid=2904">http://wiki.nesdev.com/w/index.php?title=NTSC_video&amp;oldid=2904</a>"</div>
		<div id="catlinks" class="catlinks catlinks-allhidden"></div>		<!-- end content -->
				<div class="visualClear"></div>
	</div>
</div></div>
<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
				<li id="ca-nstab-main" class="selected"><a href="./NTSC video - Nesdev wiki_files/NTSC video - Nesdev wiki.htm" title="View the content page [alt-c]" accesskey="c">Page</a></li>
				<li id="ca-talk"><a href="http://wiki.nesdev.com/w/index.php/Talk:NTSC_video" title="Discussion about the content page [alt-t]" accesskey="t">Discussion</a></li>
				<li id="ca-viewsource"><a href="http://wiki.nesdev.com/w/index.php?title=NTSC_video&action=edit" title="This page is protected.
You can view its source [alt-e]" accesskey="e">View source</a></li>
				<li id="ca-history"><a href="http://wiki.nesdev.com/w/index.php?title=NTSC_video&action=history" title="Past revisions of this page [alt-h]" accesskey="h">History</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="http://wiki.nesdev.com/w/index.php?title=Special:UserLogin&returnto=NTSC_video" title="You are encouraged to log in; however, it is not mandatory [alt-o]" accesskey="o">Log in</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a title="Visit the main page" style="background-image: url(/w/skins/common/images/NESdevWikiLogo7.png);" href="http://wiki.nesdev.com/w/index.php/Nesdev_Wiki"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class="generated-sidebar portlet" id="p-navigation">
		<h5>Navigation</h5>
		<div class="pBody">
			<ul>
				<li id="n-Nesdev-main-page"><a href="http://wiki.nesdev.com/w/index.php/Nesdev">Nesdev main page</a></li>
				<li id="n-Wiki-main-page"><a href="http://wiki.nesdev.com/w/index.php/Nesdev_Wiki">Wiki main page</a></li>
				<li id="n-Nes-reference-guide"><a href="http://wiki.nesdev.com/w/index.php/Nes_reference_guide">Nes reference guide</a></li>
				<li id="n-Programming-guide"><a href="http://wiki.nesdev.com/w/index.php/Programming_guide">Programming guide</a></li>
				<li id="n-Projects"><a href="http://wiki.nesdev.com/w/index.php/Projects">Projects</a></li>
				<li id="n-NESdev-BBS"><a href="http://nesdev.parodius.com/bbs" rel="nofollow">NESdev BBS</a></li>
				<li id="n-.23NESdev"><a href="http://wiki.nesdev.com/w/index.php/NESdev_IRC_channel">#NESdev</a></li>
				<li id="n-recentchanges"><a href="http://wiki.nesdev.com/w/index.php/Special:RecentChanges" title="A list of recent changes in the wiki [alt-r]" accesskey="r">Recent changes</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="http://wiki.nesdev.com/w/index.php" id="searchform">
				<input type="hidden" name="title" value="Special:Search">
				<input type="search" name="search" title="Search Nesdev wiki [alt-f]" accesskey="f" id="searchInput">
				<input type="submit" name="go" value="Go" title="Go to a page with this exact name if exists" id="searchGoButton" class="searchButton">&nbsp;
				<input type="submit" name="fulltext" value="Search" title="Search the pages for this text" id="mw-searchButton" class="searchButton">
			</form>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="http://wiki.nesdev.com/w/index.php/Special:WhatLinksHere/NTSC_video" title="A list of all wiki pages that link here [alt-j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="http://wiki.nesdev.com/w/index.php/Special:RecentChangesLinked/NTSC_video" title="Recent changes in pages linked from this page [alt-k]" accesskey="k">Related changes</a></li>
				<li id="t-specialpages"><a href="http://wiki.nesdev.com/w/index.php/Special:SpecialPages" title="A list of all special pages [alt-q]" accesskey="q">Special pages</a></li>
				<li><a href="http://wiki.nesdev.com/w/index.php?title=NTSC_video&printable=yes" rel="alternate">Printable version</a></li>
				<li id="t-permalink"><a href="http://wiki.nesdev.com/w/index.php?title=NTSC_video&oldid=2904" title="Permanent link to this revision of the page">Permanent link</a></li>
			</ul>
		</div>
	</div>
</div><!-- end of the left (by default at least) column -->
<div class="visualClear"></div>
<div id="footer">
	<div id="f-poweredbyico">
		<a href="http://www.mediawiki.org/"><img src="./NTSC video - Nesdev wiki_files/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" width="88" height="31"></a>
	</div>
	<ul id="f-list">
		<li id="lastmod"> This page was last modified on 9 November 2011, at 07:41.</li>
		<li id="viewcount">This page has been accessed 5,025 times.</li>
		<li id="privacy"><a href="http://wiki.nesdev.com/w/index.php/Nesdev_wiki:Privacy_policy" title="Nesdev wiki:Privacy policy">Privacy policy</a></li>
		<li id="about"><a href="http://wiki.nesdev.com/w/index.php/Nesdev_wiki:About" title="Nesdev wiki:About">About Nesdev wiki</a></li>
		<li id="disclaimer"><a href="http://wiki.nesdev.com/w/index.php/Nesdev_wiki:General_disclaimer" title="Nesdev wiki:General disclaimer">Disclaimers</a></li>
	</ul>
</div>
</div>
<script>if(window.mw){
	mw.loader.load(["mediawiki.user", "mediawiki.util", "mediawiki.page.ready", "mediawiki.legacy.wikibits", "mediawiki.legacy.ajax"]);
}
</script><script type="text/javascript" src="./NTSC video - Nesdev wiki_files/load(3).php"></script>
<script src="./NTSC video - Nesdev wiki_files/load(4).php"></script>
<script>if(window.mw){
	mw.user.options.set({"ccmeonemails":0,"cols":80,"date":"default","diffonly":0,"disablemail":0,"disablesuggest":0,"editfont":"default","editondblclick":0,"editsection":1,"editsectiononrightclick":0,"enotifminoredits":0,"enotifrevealaddr":0,"enotifusertalkpages":1,"enotifwatchlistpages":0,"extendwatchlist":0,"externaldiff":0,"externaleditor":0,"fancysig":0,"forceeditsummary":0,"gender":"unknown","hideminor":0,"hidepatrolled":0,"highlightbroken":1,"imagesize":2,"justify":0,"math":1,"minordefault":0,"newpageshidepatrolled":0,"nocache":0,"noconvertlink":0,"norollbackdiff":0,"numberheadings":0,"previewonfirst":0,"previewontop":1,"quickbar":5,"rcdays":7,"rclimit":50,"rememberpassword":0,"rows":25,"searchlimit":20,"showhiddencats":0,"showjumplinks":1,"shownumberswatching":1,"showtoc":1,"showtoolbar":1,"skin":"monobook","stubthreshold":0,"thumbsize":2,"underline":2,"uselivepreview":0,"usenewrc":0,"watchcreations":0,"watchdefault":0,"watchdeletion":0,"watchlistdays":3,"watchlisthideanons":0,
	"watchlisthidebots":0,"watchlisthideliu":0,"watchlisthideminor":0,"watchlisthideown":0,"watchlisthidepatrolled":0,"watchmoves":0,"wllimit":250,"variant":"en","language":"en","searchNs0":true,"searchNs1":false,"searchNs2":false,"searchNs3":false,"searchNs4":false,"searchNs5":false,"searchNs6":false,"searchNs7":false,"searchNs8":false,"searchNs9":false,"searchNs10":false,"searchNs11":false,"searchNs12":false,"searchNs13":false,"searchNs14":false,"searchNs15":false});;mw.user.tokens.set({"editToken":"+\\","watchToken":false});;mw.loader.state({"user.options":"ready","user.tokens":"ready"});
	
	/* cache key: ndwiki-mw1_:resourceloader:filter:minify-js:4:99acc2c3ab516bb21085c70c2195f3df */
}
</script><!-- Served in 0.215 secs. --></body></html>